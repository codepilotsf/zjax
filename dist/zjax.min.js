window.zjax=getGlobalZjaxObject();addEventListener("DOMContentLoaded",(function(){zjax.debug&&debug("Parsing DOM");parseZSwaps(document)}));function getGlobalZjaxObject(){return{debug:false,actions:{},register:function(arg1,arg2){const namespace=arg2?arg1:null;const object=arg2?arg2:arg1;let actionsTarget;if(namespace){this.actions[namespace]={};actionsTarget=this.actions[namespace]}else{actionsTarget=this.actions}Object.keys(object).forEach((function(name){const handler=object[name];actionsTarget[name]=handler}))}}}function parseZSwaps(documentOrNode){const zSwapNodes=getMatchingNodes(documentOrNode,"[z-swap]");zjax.debug&&debug(`Found ${zSwapNodes.length} z-swap nodes in ${documentOrNode.tagName||"document"}`);zSwapNodes.forEach((function(el){try{const valueString=collapseCommas(el.getAttribute("z-swap"));const valueParts=valueString.split(/\s/);if(valueParts.length<1||valueParts.length>4){throw new Error("Must have between 1 and 4 parts separated by spaces.")}const swapString=valueParts.pop()||null;const triggerString=valueParts[0]&&valueParts[0].startsWith("@")?valueParts.shift():null;const endpointString=valueParts.pop()||null;const methodString=valueParts.pop()||null;const zSwap={trigger:getTrigger(triggerString,el),method:getMethod(methodString,el),endpoint:getEndpoint(endpointString,el),swaps:getSwaps(swapString)};const zSwapFunction=getZSwapFunction(zSwap,el);attachEventListener(zSwap.trigger,zSwapFunction,el);attachMutationObserver(zSwap.trigger,zSwapFunction,el);zjax.debug&&debug(`Added z-swap for '${zSwap.trigger}' events to ${prettyNodeName(el)}`)}catch(error){console.error(`ZJAX ERROR – Unable to parse z-swap: ${error.message}\n`,el)}}))}function prettyNodeName(node){return"<"+node.tagName.toLowerCase()+(node.id?"#"+node.id:"")+">"}function getMatchingNodes(documentOrNode,selector){const nodesToParse=[];nodesToParse.push(...documentOrNode.querySelectorAll("[z-swap]"));if(documentOrNode!=document&&documentOrNode.matches("[z-swap]")){nodesToParse.push(documentOrNode)}return nodesToParse}function getTrigger(triggerString,el){if(triggerString){return triggerString.substr(1)}if(el.tagName==="FORM"){return"submit"}return"click"}function getMethod(methodString,el){if(methodString){const method=methodString.toUpperCase();if(!["GET","POST","PUT","PATCH","DELETE"].includes(method)){throw new Error(`Invalid method: ${method}`)}return method}if(el.tagName==="FORM"){return el.getAttribute("method")||"POST"}return"GET"}function getEndpoint(endpointString,el){if(["GET","POST","PUT","PATCH","DELETE"].includes(endpointString)){throw new Error("Missing required endpoint value.")}if(endpointString){return endpointString}if(el.tagName==="A"){return el.getAttribute("href")}if(el.tagName==="FORM"){return el.getAttribute("action")}throw new Error("Missing required endpoint value.")}function getSwaps(swapString){const swaps=[];swapString.split(",").forEach((function(swapPart){const swap={};const sourceAndTarget=swapPart.split("->");const targetAndSwapType=sourceAndTarget.pop();const[target,swapType]=targetAndSwapType.split("|");const source=sourceAndTarget[0]||target;swap["source"]=source;swap["target"]=target;swap["swapType"]=swapType||"outer";swaps.push(swap)}));return swaps}function getZSwapFunction(zSwap,el){return async function(event){event.preventDefault();event.stopPropagation();zjax.debug&&debug("z-swap triggered for",zSwap);try{const response=await fetch(zSwap.endpoint,{method:zSwap.method,body:null});if(!response.ok){return}const responseDOM=(new DOMParser).parseFromString(await response.text(),"text/html");zjax.debug&&debug(`z-swap response from ${zSwap.endpoint} received and parsed`);zSwap.swaps.forEach((function(swap){const newNode=responseDOM.querySelector(swap.source);if(!newNode&&swap.swapType!=="none"&&swap.swapType!=="delete"){throw new Error(`Source node ${swap.source} does not exist in response DOM`)}const existingNode=document.querySelector(swap.target);if(!existingNode&&swap.swapType!=="none"){throw new Error(`Target node '${swap.target}' does not exist in local DOM`)}zjax.debug&&debug(`Parsing incoming response for z-swaps`);parseZSwaps(newNode);swapOneNode(existingNode,newNode,swap.swapType)}))}catch(error){console.error(`ZJAX ERROR – Unable to execute z-swap function: ${error.message}\n`,el)}}}let transitionIndex=0;function swapOneNode(existingNode,newNode,swapType){transitionIndex+=1;existingNode.style.viewTransitionName="zjax-transition"+transitionIndex;document.startViewTransition((async()=>{if(swapType==="outer"){existingNode.outerHTML=newNode.outerHTML;return}if(swapType==="inner"){existingNode.innerHTML=newNode.outerHTML;return}if(swapType==="before"){existingNode.parentNode.insertBefore(newNode,existingNode);return}if(swapType==="after"){existingNode.parentNode.insertBefore(newNode,existingNode.nextSibling);return}if(swapType==="prepend"){existingNode.insertBefore(newNode,existingNode.firstChild);return}if(swapType==="append"){existingNode.appendChild(newNode);return}if(swapType==="delete"){existingNode.remove();return}if(swapType==="none"){return}throw new Error(`Unknown swap type: ${swapType}`)}))}function attachEventListener(trigger,handler,el){el.addEventListener(trigger,handler)}function attachMutationObserver(trigger,handler,el){const observer=new MutationObserver((mutationsList=>{for(const mutation of mutationsList){for(const removedNode of mutation.removedNodes){if(removedNode===el||removedNode.contains(el)){el.removeEventListener(trigger,handler);zjax.debug&&debug(`Removing event listener for ${prettyNodeName(el)} (no longer in DOM)`);observer.disconnect();return}}}}));observer.observe(document.body,{childList:true,subtree:true})}function collapseCommas(str){return str.replace(/\s*,\s*/g,",")}function debug(){console.log("ZJAX DEBUG:",...arguments)}