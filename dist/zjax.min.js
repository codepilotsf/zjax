(()=>{window.zjax=b();var g=["GET","POST","PUT","PATCH","DELETE"],m=["outer","inner"],w=["outer","inner","before","after","prepend","append","none","delete"],y=document.startViewTransition!==void 0;addEventListener("DOMContentLoaded",function(){p("Parsing DOM"),l(document)});function b(){return{debug:!1,transitions:!0,zjaxActions:{},userActions:{},actions:function(e,r){let t=r?e:null;if(t==="zjax")throw new Error("'zjax' is a reserved actions namespace");let n=r||e,o;t?(this.userActions[t]={},o=this.userActions[t]):o=this.userActions,Object.keys(n).forEach(function(a){let i=n[a];o[a]=i})}}}async function l(e){let r=A(e,"[z-swap]");p(`Found ${r.length} z-swap nodes in ${u(e)}`);for(let t of r)try{zSwapString=t.getAttribute("z-swap");let n=T(zSwapString,t),o=z(n,t);x(n.trigger,o,t),D(n.trigger,o,t),n.trigger==="load"&&t.dispatchEvent(new Event("load")),zjax.debug&&p(`Added z-swap for '${n.trigger}' events to ${u(t)}`)}catch(n){console.error(`ZJAX ERROR \u2013 Unable to parse z-swap: ${n.message}
`,t,n.stack)}}function T(e,r){let n=R(e).split(/\s/);if(n.length<1||n.length>4)throw new Error("Must have between 1 and 4 parts separated by spaces.");let o={},a=[];for(;n.length>0;){let i=n.shift(),s=E(i);s?o[s[0]]=s[1]:a.push(i)}if(o.trigger==="@submit"&&r.tagName!=="FORM")throw new Error("@submit trigger is only available on <FORM> elements");if(o.swaps=v(a.join(" ")),o.trigger||(o.trigger=r.tagName==="FORM"?"submit":"click"),o.method||(o.method=r.tagName==="FORM"?"POST":"GET"),!o.endpoint)if(r.tagName==="FORM")o.endpoint=r.action;else if(r.tagName==="A")o.endpoint=r.href;else throw new Error("No endpoint inferrable or specified");return o}function E(e){if(e.startsWith("@"))return["trigger",e.substr(1)];if(g.includes(e.toUpperCase()))return["method",e.toUpperCase()];if(regexEndpoint=/^(\/.*|\.\/.*|https?:\/\/.*|\.)$/,regexEndpoint.test(e))return["endpoint",e]}function u(e){return e instanceof Document?"#document":"<"+e.tagName.toLowerCase()+(e.id?"#"+e.id:"")+">"}function A(e,r){let t=[];return t.push(...e.querySelectorAll(r)),!(e instanceof Document)&&e.matches(r)&&t.push(e),t}function v(e){let r=[];return e.split(",").forEach(function(t){let n={},o=t.split("->")||[],a=o.pop(),[i,s]=a.split("|"),c=o[0]||"",[h,f]=c&&c.split("|");if(n.response=h||i,n.target=i,n.responseType=f&&f.trim()||"outer",n.swapType=s&&s.trim()||"outer",n.responseType&&!m.includes(n.responseType))throw new Error(`Invalid swap type: ${n.responseType}`);if(n.swapType&&!w.includes(n.swapType))throw new Error(`Invalid swap type: ${n.swapType}`);if(n.response==="*"&&n.responseType!=="outer")throw new Error('Wild card "*" can notbe piped to a Response Type');if(n.target==="*"&&n.swapType!=="outer")throw new Error('Wild card "*" can not be piped to a Swap Type');r.push(n)}),r}function z(e,r){return async function(t){t.preventDefault(),t.stopPropagation(),p("z-swap triggered for",e);try{let n=await M(e.method,e.endpoint);e.swaps.forEach(function(o){let[a,i]=S(n,o);p("Parsing incoming response for z-swaps"),a&&l(a),y&&zjax.transitions?document.startViewTransition(()=>{d(i,a,o.swapType,o.responseType)}):d(i,a,o.swapType,o.responseType)})}catch(n){console.error(`ZJAX ERROR \u2013 Unable to execute z-swap function: ${n.message}
`,r,n.stack)}}}async function M(e,r){let t=await fetch(r,{method:e,body:null});if(!t.ok)throw new Error(`${t.status} ${t.statusText} for ${r}`);let n=new DOMParser().parseFromString(await t.text(),"text/html");return p(`z-swap response from ${r} received and parsed`),n}function S(e,r){let t,n;if(r.target==="*"){if(t=document.querySelector("body"),!t)throw new Error("Unable to find body element in local DOM to swap into")}else t=document.querySelector(r.target);if(n=r.response==="*"?e:e.querySelector(r.response),!t&&r.swapType!=="none")throw new Error(`Target node '${r.target}' does not exist in local DOM`);if(!n&&r.swapType!=="none"&&r.swapType!=="delete")throw new Error(`Source node ${r.response} does not exist in response DOM`);return[n,t]}function d(e,r,t,n){r=n==="inner"?r.childNodes:r;let{interimResponseNode:o,attributesMap:a}=processAttributes(e,responsNode);console.log("attrsForIds",attrsForIds);let i=O(r);if(t==="outer"){let s=e.parentNode;i.forEach(c=>{s.insertBefore(c,e)}),s.removeChild(e);return}if(t==="inner"){e.textContent="",i.forEach(s=>{e.appendChild(s)});return}if(t==="before"){i.forEach(s=>{e.parentNode.insertBefore(s,e)});return}if(t==="after"){let s=e.parentNode;referenceNodeToAppendTo=e,i.forEach(c=>{c===s.lastChild?s.appendChild(c):s.insertBefore(c,referenceNodeToAppendTo.nextSibling),referenceNodeToAppendTo=c});return}if(t==="prepend"){let s=e.firstChild;i.forEach(c=>{s?e.insertBefore(c,s):e.appendChild(c)});return}if(t==="append"){i.forEach(s=>{e.appendChild(s)});return}if(t==="delete"){e.remove();return}}function O(e){if(e instanceof Document){let r=e.querySelector("html");if(r)return Array.from(r.childNodes);let t=document.createDocumentFragment();for(let n of e.childNodes)t.appendChild(n);return Array.from(t.childNodes)}return e instanceof NodeList||Array.isArray(e)?Array.from(e):[e]}function x(e,r,t){t.addEventListener(e,r)}function D(e,r,t){let n=new MutationObserver(o=>{for(let a of o)for(let i of a.removedNodes)if(i===t||i.contains(t)){t.removeEventListener(e,r),zjax.debug&&p(`Removing event listener for ${u(t)} (no longer in DOM)`),n.disconnect();return}});n.observe(document.body,{childList:!0,subtree:!0})}function R(e){return e.replace(/\s*,\s*/g,",")}function p(){zjax.debug&&console.log("ZJAX DEBUG:",...arguments)}})();
